<crap_result>
  <project>
    /media/DATA/Projects/excel4j
  </project>
  <project_id>
    1266200666470
  </project_id>
  <timestamp>
    14/02/10 23:24
  </timestamp>
  <classDirectories>
    <classDirectory>
      /media/DATA/Projects/excel4j/target/classes
    </classDirectory>
  </classDirectories>
  <testClassDirectories>
    <testClassDirectory>
      /media/DATA/Projects/excel4j/target/classes
    </testClassDirectory>
  </testClassDirectories>
  <sourceDirectories>
    <sourceDirectory>
      /media/DATA/Projects/excel4j/src/main/java
    </sourceDirectory>
  </sourceDirectories>
  <libClasspaths>
    <libClasspath>
      /excel4j/target/classes
    </libClasspath>
    <libClasspath>
      /home/fabricio/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar
    </libClasspath>
    <libClasspath>
      /home/fabricio/.m2/repository/net/sourceforge/jexcelapi/jxl/2.6/jxl-2.6.jar
    </libClasspath>
    <libClasspath>
      /home/fabricio/.m2/repository/com/google/collections/google-collections/1.0-rc2/google-collections-1.0-rc2.jar
    </libClasspath>
    <libClasspath>
      /home/fabricio/.m2/repository/com/google/code/guice/guice/1.0/guice-1.0.jar
    </libClasspath>
  </libClasspaths>
  <stats>
    <name>
      Method Crap Stats
    </name>
    <totalCrap>
      284,00
    </totalCrap>
    <crap>
      3,02
    </crap>
    <median>
      2,00
    </median>
    <average>
      3,02
    </average>
    <stdDev>
      3,11
    </stdDev>
    <methodCount>
      94
    </methodCount>
    <crapMethodCount>
      0
    </crapMethodCount>
    <crapMethodPercent>
      0,00
    </crapMethodPercent>
    <crapLoad>
      0
    </crapLoad>
    <crapThreshold>
      30
    </crapThreshold>
    <globalAverage>
      -1,00
    </globalAverage>
    <globalCraploadAverage>
      -1,00
    </globalCraploadAverage>
    <globalCrapMethodAverage>
      -1,00
    </globalCrapMethodAverage>
    <globalTotalMethodAverage>
      -1,00
    </globalTotalMethodAverage>
    <globalAverageDiff>
      4,02
    </globalAverageDiff>
    <globalCraploadAverageDiff>
      1,00
    </globalCraploadAverageDiff>
    <globalCrapMethodAverageDiff>
      1,00
    </globalCrapMethodAverageDiff>
    <globalTotalMethodAverageDiff>
      95,00
    </globalTotalMethodAverageDiff>
    <shareStatsUrl>
      http://www.crap4j.org/benchmark/stats/new?stat[project_hash]=1266200666470&amp;stat[project_url]=excel4j&amp;stat[crap]=0.00&amp;stat[crap_load]=0&amp;stat[crap_methods]=0&amp;stat[total_methods]=94&amp;stat[ones]=0&amp;stat[twos]=80&amp;stat[fours]=10&amp;stat[eights]=2&amp;stat[sixteens]=2&amp;stat[thirtytwos]=0&amp;stat[sixtyfours]=0&amp;stat[one28s]=0&amp;stat[two56s]=0
    </shareStatsUrl>
    <histogram>
      <hist>
        <place>
          one
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          two
        </place>
        <value>
          80
        </value>
        <height>
          170,00px
        </height>
      </hist>
      <hist>
        <place>
          four
        </place>
        <value>
          10
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          eight
        </place>
        <value>
          2
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          sixteen
        </place>
        <value>
          2
        </value>
        <height>
          28,00px
        </height>
      </hist>
      <hist>
        <place>
          thirtytwo
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          sixtyfour
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          one28
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
      <hist>
        <place>
          two56
        </place>
        <value>
          0
        </value>
        <height>
          0,00px
        </height>
      </hist>
    </histogram>
  </stats>
  <methods>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelColumn
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljxl/Sheet;I)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(jxl.Sheet, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelColumn
      </className>
      <methodName>
        getRow
      </methodName>
      <methodSignature>
        (I)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getRow(int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile$TransformSheet
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile$TransformSheet
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lorg/excel4j/ExcelFile$TransformSheet;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(org.excel4j.ExcelFile$TransformSheet)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile$TransformSheet
      </className>
      <methodName>
        apply
      </methodName>
      <methodSignature>
        (Ljava/lang/Object;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object apply(java.lang.Object)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile$TransformSheet
      </className>
      <methodName>
        apply
      </methodName>
      <methodSignature>
        (Ljxl/Sheet;)Lorg/excel4j/ExcelSheet;
      </methodSignature>
      <fullMethod>
        public  org.excel4j.ExcelSheet apply(jxl.Sheet)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile
      </className>
      <methodName>
        getExcelSheets
      </methodName>
      <methodSignature>
        ()Ljava/util/List&lt;Lorg/excel4j/ExcelSheet;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.List&lt;org.excel4j.ExcelSheet&gt; getExcelSheets()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile
      </className>
      <methodName>
        getName
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getName()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile
      </className>
      <methodName>
        getPath
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getPath()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile
      </className>
      <methodName>
        hashCode
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int hashCode()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRepository
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRepository
      </className>
      <methodName>
        add
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void add(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRepository
      </className>
      <methodName>
        getSheet
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lorg/excel4j/ExcelSheet;
      </methodSignature>
      <fullMethod>
        public  org.excel4j.ExcelSheet getSheet(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRepository
      </className>
      <methodName>
        getSheets
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/lang/Iterable&lt;Lorg/excel4j/ExcelSheet;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.lang.Iterable&lt;org.excel4j.ExcelSheet&gt; getSheets(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow$NullExcelRow
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow$NullExcelRow
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lorg/excel4j/ExcelRow$NullExcelRow;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(org.excel4j.ExcelRow$NullExcelRow)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow$NullExcelRow
      </className>
      <methodName>
        getColumn
      </methodName>
      <methodSignature>
        (C)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getColumn(char)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow$NullExcelRow
      </className>
      <methodName>
        getColumn
      </methodName>
      <methodSignature>
        (I)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getColumn(int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow$NullExcelRow
      </className>
      <methodName>
        getColumn
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getColumn(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow$NullExcelRow
      </className>
      <methodName>
        getColumn
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Ljava/lang/String;Lorg/excel4j/transform/Transformer&lt;TT;&gt;;)TT;
      </methodSignature>
      <fullMethod>
        public  T getColumn&lt;T&gt;(java.lang.String, org.excel4j.transform.Transformer&lt;T&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow$NullExcelRow
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow$SingletonHolder
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow$SingletonHolder
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljxl/Sheet;I)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(jxl.Sheet, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lorg/excel4j/ExcelRow;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(org.excel4j.ExcelRow)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow
      </className>
      <methodName>
        NULL_ROW
      </methodName>
      <methodSignature>
        ()Lorg/excel4j/ExcelRow;
      </methodSignature>
      <fullMethod>
        public static  org.excel4j.ExcelRow NULL_ROW()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow
      </className>
      <methodName>
        getColumn
      </methodName>
      <methodSignature>
        (C)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getColumn(char)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow
      </className>
      <methodName>
        getColumn
      </methodName>
      <methodSignature>
        (I)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getColumn(int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow
      </className>
      <methodName>
        getColumn
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getColumn(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow
      </className>
      <methodName>
        getColumn
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Ljava/lang/String;Lorg/excel4j/transform/Transformer&lt;TT;&gt;;)TT;
      </methodSignature>
      <fullMethod>
        public  T getColumn&lt;T&gt;(java.lang.String, org.excel4j.transform.Transformer&lt;T&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet$SingletonHolder
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet$SingletonHolder
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljxl/Sheet;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(jxl.Sheet)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lorg/excel4j/ExcelSheet;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(org.excel4j.ExcelSheet)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        NULL_SHEET
      </methodName>
      <methodSignature>
        ()Lorg/excel4j/ExcelSheet;
      </methodSignature>
      <fullMethod>
        public static  org.excel4j.ExcelSheet NULL_SHEET()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        getColumns
      </methodName>
      <methodSignature>
        ()Ljava/lang/Iterable&lt;Lorg/excel4j/ExcelColumn;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.lang.Iterable&lt;org.excel4j.ExcelColumn&gt; getColumns()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        getColumnsAmount
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getColumnsAmount()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        getName
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getName()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        getRows
      </methodName>
      <methodSignature>
        ()Ljava/lang/Iterable&lt;Lorg/excel4j/ExcelRow;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.lang.Iterable&lt;org.excel4j.ExcelRow&gt; getRows()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        getRowsAmount
      </methodName>
      <methodSignature>
        ()I
      </methodSignature>
      <fullMethod>
        public  int getRowsAmount()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelSheet
      </className>
      <methodName>
        iterator
      </methodName>
      <methodSignature>
        ()Ljava/util/Iterator&lt;Lorg/excel4j/ExcelRow;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.Iterator&lt;org.excel4j.ExcelRow&gt; iterator()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        ColumnIterable$ColumnIterator
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljxl/Sheet;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(jxl.Sheet)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        ColumnIterable$ColumnIterator
      </className>
      <methodName>
        computeNext
      </methodName>
      <methodSignature>
        ()Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        protected  java.lang.Object computeNext()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        ColumnIterable
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljxl/Sheet;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(jxl.Sheet)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        ColumnIterable
      </className>
      <methodName>
        iterator
      </methodName>
      <methodSignature>
        ()Ljava/util/Iterator&lt;Lorg/excel4j/ExcelColumn;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.Iterator&lt;org.excel4j.ExcelColumn&gt; iterator()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        RowIterable$RowIterator
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljxl/Sheet;)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(jxl.Sheet)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        RowIterable$RowIterator
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljxl/Sheet;Lorg/excel4j/iterators/RowIterable$RowIterator;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(jxl.Sheet, org.excel4j.iterators.RowIterable$RowIterator)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        RowIterable$RowIterator
      </className>
      <methodName>
        computeNext
      </methodName>
      <methodSignature>
        ()Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        protected  java.lang.Object computeNext()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        RowIterable
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljxl/Sheet;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(jxl.Sheet)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        RowIterable
      </className>
      <methodName>
        iterator
      </methodName>
      <methodSignature>
        ()Ljava/util/Iterator&lt;Lorg/excel4j/ExcelRow;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.Iterator&lt;org.excel4j.ExcelRow&gt; iterator()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum$1
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum$1
      </className>
      <methodName>
        transform
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object transform(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum$1
      </className>
      <methodName>
        transform
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/util/Date;
      </methodSignature>
      <fullMethod>
        public  java.util.Date transform(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum$2
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum$2
      </className>
      <methodName>
        transform
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/lang/Number;
      </methodSignature>
      <fullMethod>
        public  java.lang.Number transform(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum$2
      </className>
      <methodName>
        transform
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object transform(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum$3
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum$3
      </className>
      <methodName>
        transform
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object transform(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum$3
      </className>
      <methodName>
        transform
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/math/BigDecimal;
      </methodSignature>
      <fullMethod>
        public  java.math.BigDecimal transform(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum
      </className>
      <methodName>
        &lt;clinit&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        static  void &lt;clinit&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;I)V
      </methodSignature>
      <fullMethod>
        private  void &lt;init&gt;(java.lang.String, int)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/String;ILorg/excel4j/transform/TransformersEnum;)V
      </methodSignature>
      <fullMethod>
         void &lt;init&gt;(java.lang.String, int, org.excel4j.transform.TransformersEnum)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum
      </className>
      <methodName>
        valueOf
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lorg/excel4j/transform/TransformersEnum;
      </methodSignature>
      <fullMethod>
        public static  org.excel4j.transform.TransformersEnum valueOf(java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.transform
      </package>
      <className>
        TransformersEnum
      </className>
      <methodName>
        values
      </methodName>
      <methodSignature>
        ()[Lorg/excel4j/transform/TransformersEnum;
      </methodSignature>
      <fullMethod>
        public static  org.excel4j.transform.TransformersEnum[] values()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils$AdaptExcelRow
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/lang/Class&lt;TT;&gt;;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.lang.Class&lt;T&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils$AdaptExcelRow
      </className>
      <methodName>
        apply
      </methodName>
      <methodSignature>
        (Ljava/lang/Object;)Ljava/lang/Object;
      </methodSignature>
      <fullMethod>
        public  java.lang.Object apply(java.lang.Object)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils$AdaptExcelRow
      </className>
      <methodName>
        apply
      </methodName>
      <methodSignature>
        (Lorg/excel4j/ExcelRow;)TT;
      </methodSignature>
      <fullMethod>
        public  T apply(org.excel4j.ExcelRow)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils$ValidateRow
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/String;&gt;;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(java.util.Map&lt;java.lang.String, java.lang.String&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils$ValidateRow
      </className>
      <methodName>
        apply
      </methodName>
      <methodSignature>
        (Ljava/lang/Object;)Z
      </methodSignature>
      <fullMethod>
        public  boolean apply(java.lang.Object)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lorg/excel4j/ExcelRepository;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(org.excel4j.ExcelRepository)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils
      </className>
      <methodName>
        findRowInSheetByParameters
      </methodName>
      <methodSignature>
        (Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/String;&gt;;Ljava/lang/String;)Lorg/excel4j/ExcelRow;
      </methodSignature>
      <fullMethod>
        public  org.excel4j.ExcelRow findRowInSheetByParameters(java.util.Map&lt;java.lang.String, java.lang.String&gt;, java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils
      </className>
      <methodName>
        findRowInSheetByParameters
      </methodName>
      <methodSignature>
        &lt;T:Lorg/excel4j/utils/RowAdapter;&gt;(Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/String;&gt;;Ljava/lang/String;Ljava/lang/Class&lt;TT;&gt;;)TT;
      </methodSignature>
      <fullMethod>
        public  T findRowInSheetByParameters&lt;T extends org.excel4j.utils.RowAdapter&gt;(java.util.Map&lt;java.lang.String, java.lang.String&gt;, java.lang.String, java.lang.Class&lt;T&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils
      </className>
      <methodName>
        findRowsInSheetByParameters
      </methodName>
      <methodSignature>
        (Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/String;&gt;;Ljava/lang/String;)Ljava/util/List&lt;Lorg/excel4j/ExcelRow;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.List&lt;org.excel4j.ExcelRow&gt; findRowsInSheetByParameters(java.util.Map&lt;java.lang.String, java.lang.String&gt;, java.lang.String)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils
      </className>
      <methodName>
        findRowsInSheetByParameters
      </methodName>
      <methodSignature>
        &lt;T:Lorg/excel4j/utils/RowAdapter;&gt;(Ljava/util/Map&lt;Ljava/lang/String;Ljava/lang/String;&gt;;Ljava/lang/String;Ljava/lang/Class&lt;TT;&gt;;)Ljava/util/List&lt;TT;&gt;;
      </methodSignature>
      <fullMethod>
        public  java.util.List&lt;T&gt; findRowsInSheetByParameters&lt;T extends org.excel4j.utils.RowAdapter&gt;(java.util.Map&lt;java.lang.String, java.lang.String&gt;, java.lang.String, java.lang.Class&lt;T&gt;)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Iterables
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        ()V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;()
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        RowAdapter
      </className>
      <methodName>
        &lt;init&gt;
      </methodName>
      <methodSignature>
        (Lorg/excel4j/ExcelRow;)V
      </methodSignature>
      <fullMethod>
        public  void &lt;init&gt;(org.excel4j.ExcelRow)
      </fullMethod>
      <crap>
        2,00
      </crap>
      <complexity>
        1
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelColumn
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRow
      </className>
      <methodName>
        toString
      </methodName>
      <methodSignature>
        ()Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String toString()
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        ColumnIterable$ColumnIterator
      </className>
      <methodName>
        computeNext
      </methodName>
      <methodSignature>
        ()Lorg/excel4j/ExcelColumn;
      </methodSignature>
      <fullMethod>
        protected  org.excel4j.ExcelColumn computeNext()
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.iterators
      </package>
      <className>
        RowIterable$RowIterator
      </className>
      <methodName>
        computeNext
      </methodName>
      <methodSignature>
        ()Lorg/excel4j/ExcelRow;
      </methodSignature>
      <fullMethod>
        protected  org.excel4j.ExcelRow computeNext()
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils
      </className>
      <methodName>
        add
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void add(java.lang.String)
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils
      </className>
      <methodName>
        addDir
      </methodName>
      <methodSignature>
        (Ljava/io/File;)V
      </methodSignature>
      <fullMethod>
        private  void addDir(java.io.File)
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils
      </className>
      <methodName>
        loadExcels
      </methodName>
      <methodSignature>
        ([Ljava/io/File;)V
      </methodSignature>
      <fullMethod>
        public  void loadExcels(java.io.File[])
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils
      </className>
      <methodName>
        loadExcels
      </methodName>
      <methodSignature>
        ([Ljava/lang/String;)V
      </methodSignature>
      <fullMethod>
        public  void loadExcels(java.lang.String[])
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Iterables
      </className>
      <methodName>
        fistItemOrDefault
      </methodName>
      <methodSignature>
        &lt;T:Ljava/lang/Object;&gt;(Ljava/lang/Iterable&lt;TT;&gt;;TT;)TT;
      </methodSignature>
      <fullMethod>
        public static  T fistItemOrDefault&lt;T&gt;(java.lang.Iterable&lt;T&gt;, T)
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        RowAdapter
      </className>
      <methodName>
        getColumn
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Ljava/lang/String;
      </methodSignature>
      <fullMethod>
        public  java.lang.String getColumn(java.lang.String)
      </fullMethod>
      <crap>
        6,00
      </crap>
      <complexity>
        2
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile
      </className>
      <methodName>
        getExcelSheet
      </methodName>
      <methodSignature>
        (Ljava/lang/String;)Lorg/excel4j/ExcelSheet;
      </methodSignature>
      <fullMethod>
        public  org.excel4j.ExcelSheet getExcelSheet(java.lang.String)
      </fullMethod>
      <crap>
        12,00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelRepository
      </className>
      <methodName>
        add
      </methodName>
      <methodSignature>
        (Ljava/io/File;)V
      </methodSignature>
      <fullMethod>
        public  void add(java.io.File)
      </fullMethod>
      <crap>
        12,00
      </crap>
      <complexity>
        3
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j
      </package>
      <className>
        ExcelFile
      </className>
      <methodName>
        equals
      </methodName>
      <methodSignature>
        (Ljava/lang/Object;)Z
      </methodSignature>
      <fullMethod>
        public  boolean equals(java.lang.Object)
      </fullMethod>
      <crap>
        20,00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
    <method>
      <package>
        org.excel4j.utils
      </package>
      <className>
        Excel4JUtils$ValidateRow
      </className>
      <methodName>
        apply
      </methodName>
      <methodSignature>
        (Lorg/excel4j/ExcelRow;)Z
      </methodSignature>
      <fullMethod>
        public  boolean apply(org.excel4j.ExcelRow)
      </fullMethod>
      <crap>
        20,00
      </crap>
      <complexity>
        4
      </complexity>
      <coverage>
        0,00
      </coverage>
      <crapLoad>
        0
      </crapLoad>
    </method>
  </methods>
</crap_result>
